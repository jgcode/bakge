Bakge
=====

BAKersfield Game Engine -- A collaborative effort between CS students, hobby-learners and developers of all kinds. Bakge will support both 2D and 3D games, and include all the standard facilities of a game engine.

Bakge is licensed under the MIT License (MIT). You can see the terms and details of it in the LICENSE file. Note that copyright holders include any and all contributors or authors. If you'd like your name left out, don't write your name into the AUTHORS file.

Bakge is still in early development, and is extremely unstable. Its existing API is highly subject to change, and will be constantly and expanded and modified until the first stable release of Bakge, which will be version 1.0.


Design Principles
=================

There are two primary goals for Bakge: First and foremost is to provide contributors with a rich and engaging environment for collaborative coding. There is PLENTY you can do. Secondly is the creation and maintenance of a simple and effective game and graphics engine.

If you have any way to improve Bakge in either way, please feel free to share and improve the project.


How to help
===========

The process of contributing code to Bakge may seem confusing and unnecessarily complex, but it's the best way to organize and keep track of various changes without accidentally breaking the master build or adding/removing files.

There are plenty of ways you can help without having to program:
- Run the test suite and report bugs to the issues page
- Try out the latest SDK from http://www.cs.csubak.edu/~pholden/bakge/sdk/
- Tell your friends about Bakge!
- Look through the code and try to spot defects or bugs
- Contribute your ideas to the design of Bakge's components and classes


Check out the contribution guidelines here:
http://github.com/palistov/bakge/blob/master/CONTRIBUTE.md


Building Bakge
==============

Bakge is built with CMake. You can download the latest version (2.6+ is required to build Bakge) at http://www.cmake.org/cmake/resources/software.html.

I suggest you build into a separate folder, build/. This way you can easily clean up CMake's generated files, and the .gitignore file will prevent you from accidentally adding generated files to your fork.

If you have any trouble or errors when building CMake, PLEASE CREATE AN ISSUE REPORT. It really helps to know what problems the build has, and that it works on all of the target platforms.

Bakge builds as a static library. Unit testing is done in the test/ directory. Bakge's repo is very friendly, with lots of guidelines and tips on how you can contribute. Feel free to message a contributor if you have any questions about getting started.

Note that Bakge doesn't include required external libraries in its source tree. Once Bakge requires external libraries, these will be downloaded and built with the CMake build as part of the project.


Build on the commandline (Unix-like)
 $ mkdir build
 $ cd build
 $ cmake .. -G "Unix Makefiles"
 $ make

-- or --

 $ make


The makefile is simply for convenience. It has a few targets to speed up building/cleaning Bakge.

 - all: Build using Unix Makefiles
 - clean: Clean the build folder and sdk folder
 - codeblocks: Generate a CodeBlocks project using Unix Makefiles to build


Build with CMake GUI
 1) Find Bakge root directory, set it as source
 2) Set build directory to <Bakge_root>/build
 3) Click 'Configure' at the bottom left, select your compiler
 4) Click 'Generate' at bottom left
 5) Open generated project file(s) with your IDE of choice and build

