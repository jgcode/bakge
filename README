Bakge
=====

BAKersfield Game Engine. Supports 2D and 3D games. Provides both an SDK and its own official engine application class; programmers can create their own customized engine using Bakge's core components or use the existing toolset and application to create a game at the highest level.

Bakge is licensed under the MIT License (MIT). You can see the terms and details of it in the LICENSE file. Note that copyright holders include any and all contributors or authors. If you'd like your name left out, don't write your name into the AUTHORS file.

Bakge is still in early development, and is extremely unstable. Its existing API is highly subject to change, and will be constantly and expanded and modified until the first stable release of Bakge, which will be version 1.0.


Build
=====

Bakge is built with CMake. You can download the latest version (2.6+ is required to build Bakge) at http://www.cmake.org/cmake/resources/software.html. The master branch build should always be stable. If you have any issues with a build, please raise an issue and provide information about your target build configuration, platform, IDE, CMake version, etc.

I suggest you build into a separate folder, build/. This way you can easily clean up CMake's generated files, and the .gitignore file will prevent you from accidentally adding generated files to your fork.

Bakge depends on some external libraries. For a first-time build you must have an internet connection so CMake can download and install these libraries into your source tree. You do NOT need root access to build Bakge, everything is compiled and installed inside the source tree.


Build on the commandline (Unix-like)
 $ mkdir build
 $ cd build
 $ cmake .. -G "Unix Makefiles"
 $ make

-- or --

 $ make


The makefile is simply for convenience. It has a few targets to speed up building/cleaning Bakge. Run $ make help to see the available build targets.


Build with CMake GUI
 1) Find Bakge root directory, set it as source
 2) Set build directory to <Bakge_root>/build
 3) Click 'Configure' at the bottom left, select your compiler
 4) Click 'Generate' at bottom left
 5) Open generated project file(s) with your IDE of choice and build


SDK
===

Bakge's SDK will provide compiled static and dynamic libraries for you to use when compiling your program. Shared (dynamic) libraries are in the sdk/bin/ directory, while static libraries are in the sdk/lib/ directory. Bakge's example programs will also be in the sdk/bin/ directory, as they dynamically link to the shared libraries there.

The SDK is intended primarily for programmers. You will have to create your own build, compile and debug your program on your own. The SDK also gives you the opportunity to create your own abstractions and systems on top of Bakge and its libraries, giving you more control and flexibility when creating your game.

If you want to use Bakge's official engine application, you can get the GDK (game development kit), but even then you will need to know some basic Lua to create your game.


GDK
===

Bakge's GDK is a ready-built engine and toolchain. It serves as an easy way for non-programmers to create games using Bakge without knowing more than some basic Lua (http://www.lua.org) and how to read wiki pages. Bakge's official engine will operate very similarly to the LOVE engine (http://www.love2d.org). You will build your game scripts in your own directory using Lua and the API bindings and run it through the Bakge application.
