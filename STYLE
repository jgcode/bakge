SOURCE CONTROL CONVENTION

When committing code to your git repository, it's important to remember that
each commit should be a single distinguishable change, new feature, or
deletion. Source control is not about backing up code in a remote repository,
it's about leaving a bread crumb trail which tracks the development of
the program's new features, changes and removals in distinguishable chunks.

Some tips on committing:

1) Commit often. When you finish a change, commit it.

2) Amend your commits if you find an error. `$ git commit --amend` lets you
modify your latest commit. You can do this to unstage files or stage new
changes you've made.

3) Use `$ git commit -p` to split up your changes into different hunks. It's
recommended you expand your terminal or console window vertically to see the
entire output. Enter `?` at the prompt to see what each option does.

4) Use selective commits e.g. `$ git commit include/bakge/MyChangedFile.h`
to commit only hunks from a specific file or set of files.

5) Ensure your working branch is up to date with the corresponding branch in
palistov/bakge. This way if you submit a pull request I don't have to dig
through a mountain of commits already pushed to my repo. You can do this by
doing `$ git pull palistov <branch_name>` (assuming palistov is an alias
for my remote repository https://github.com/palistov/bakge)


CODING STYLE

For consistency across the codebase, a certain coding style is recommended.
If you commit code that doesn't meet the styling standards, no worries --
I'll adjust it before finalizing the pull request. Remember that you can
always browse existing code for examples of proper style usage.

Except for the following cases, code should match the Linux kernel coding
style as described here: https://www.kernel.org/doc/Documentation/CodingStyle

If you have any questions about styling and convention that aren't answered
here, feel free to e-mail me!


NAMING

To maintain code readability, use succinct yet descriptive identifiers for
variables, types and functions. All identifiers should be camel-cased.
Certain abbreviations are allowed when appropriate, and easily understood.
(e.g. Num instead of NumberOf)

int nplayer; /* BAD */
int NumPlayers; /* GOOD */


Enumerations and macros should be in all caps.

enum DRAW_TYPE /* GOOD */
{
    ...
};

#define bge_ASSERT ... /* BAD */


Anything unable to be placed into the bakge namespace (Objective-C code,
or macros) should be prefixed with bge and styled appropriately.

#define BGE_MACRO_SYMBOL ...

@implementation bgeObjectiveCClass
...
@end


FUNCTIONS

If a function is a public API call, the identifier should be clear in what
it does. Internal functions do not need to have such a level of clarity,
but they should still be easily understood by those familiar with the
system in which they are used.

/* BAD - Reset all what?! */
void ResetAll()
{
    ...
}


/* GOOD */
void ResetPlayers()
{
    ...
}


TYPES AND CLASSES

Classes and type definitions should aim to provide as much detail about the
use of the type as possible.

/* BAD */
void SetVelocity(float X, float Y, float Z, float S);
{
    ...
}


/* GOOD */
void SetVelocity(Vector4 Direction, Meters PerSec)
{
    ...
}


COMMENT STYLE

Comment your code! Use multi-line comments, even for a single-lined comment.

// BAD
/* GOOD */


INDENTATION

Indentation is done using 4 spaces. Please don't use tabs! Namespaces and
class declarations should begin at column 0. Do not nest namespaces.


GENERAL CONVENTION

* Avoid declaring typedefs or new data types inside classes.

* Avoid the use of unnamed namespaces.

* Declaring global variables in headers is NOT OK.

* Declaring variables inside source files (hidden vars) is OK.

* Put one newline between function definitions and namespace declarations

* Put two newlines between function definitions

* Avoid using a lot of do-while loops. They can be confusing.

* Empty loops are OK but put the semicolon on a new line, indented 4 spaces

    e.g.   while(i < 20)
               ;


* Do not put spaces between control flow statements and their predicates

    e.g.    if (i > 12) /* BAD */

            if(i > 12) /* GOOOD */


* Put single lines after control flow statements on a new line

    e.g.    if(Win->IsOpen()) return true; /* BAD */

            if(Win->IsOpen()) /* GOOD */
                return true;


* Else blocks and if blocks should always match each other.

    e.g.    if(PlayerOne->IsAlive()) {
                ...
            } else return NULL; /* BAD */

            if(PlayerOne->IsAlive()) {
                ...
            } else {
                return NULL; /* GOOD */
            }


* Switch statement case labels should line up with their switch statement.
  The case block code and break (or return, not both) should be indented once.
  If a default case exists, put it at the end of the switch block.
  Do not use a break statement in a default case.
  Put a newline above each case label.

    e.g.    switch(PlayerLevel) {

            case 1:
                ...
                return false;

            case 2:
                ...
                break;

            default:
                ...
            }

