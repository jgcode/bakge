Core interface classes describing some common ground between various classes in Bakge. Understanding these interfaces will help you learn how Bakge classes interact, and how to approriately use them, and what constitutes misuse of them.


Engine
======

Base class for the engine. A typical engine will contain renderers, scene managers, resource managers, and a window as member variables. It should also houses the main loop and act as a central link between components of the engine and the game logic. In simpler terms, the engine class handles the "who", "what", "where", "when" and "why", while other classes like the Window class or Texture class all deal with their individual "how"s.


EventHandler
============

This class should generally be used as an inherited interface to ensure the Engine class implements functions to respond to events. Bakge will provide its own abstraction layer for events received by a Bakge Window in the form of the Event class. Naturally, this class should be tightly coupled to or even combined with a game logic class.

If a script language is added to dictate game logic, it is likely that that script engine class will inherit EventHandler, so the Engine classes can dispatch events which the scripts will receive.


Bindable
========

A bindable object is any object that must be bound using Bind() before it can properly be used, and must be unbound using Unbind() to prevent undesired consequences. A bindable is almost always a class that is related to the OpenGL state in some way, such as a texture, shader or a renderer.


Drawable
========

A drawable object is anything that can be drawn to the screen using OpenGL: meshes, textures, primitive shapes, etc. The Drawable class is an abstract class used as an interface to ensure these objects can all be drawn, for use in Renderer classes. (see below)


Renderer
========

A renderer is any class that implements a Render(Drawable* Obj) function. Renderers are bindable, since there may be a specific protocol to properly set up OpenGL. Try to minimize Bind() and Unbind() calls in your engine class's draw phase protocol. This common API call allows for all the internal protocol of a renderer (immediate mode, shader, deferred, etc) to be abstracted down to a simple function call, making it extremely friendly to the engine class. The Renderer handles the "how" of setting up the OpenGL state to draw the object, while the Drawable handles the "how" the object is explicitly drawn. (glVertex* function calls, matrix transformations, etc)

